{
  "openapi": "3.0.1",
  "info": {
    "title": "Algod REST API.",
    "description": "API endpoint for algod operations.",
    "contact": {
      "name": "algorand",
      "url": "https://www.algorand.com/get-in-touch/contact",
      "email": "contact@algorand.com"
    },
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "http://localhost/"
    },
    {
      "url": "https://localhost/"
    }
  ],
  "security": [
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "name": "private"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Returns OK if healthy.",
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {}
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Return metrics about algod functioning.",
        "operationId": "Metrics",
        "responses": {
          "200": {
            "description": "text with \\#-comments and key:value lines",
            "content": {}
          },
          "404": {
            "description": "metrics were compiled out",
            "content": {}
          }
        }
      }
    },
    "/genesis": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Gets the genesis information.",
        "description": "Returns the entire genesis file in json.",
        "operationId": "GetGenesis",
        "responses": {
          "200": {
            "description": "The genesis file in json.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/swagger.json": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Gets the current swagger spec.",
        "description": "Returns the entire swagger spec in json.",
        "operationId": "SwaggerJSON",
        "responses": {
          "200": {
            "description": "The current swagger spec",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/versions": {
      "get": {
        "tags": [
          "common"
        ],
        "description": "Retrieves the supported API versions, binary build versions, and genesis information.",
        "operationId": "GetVersion",
        "responses": {
          "200": {
            "$ref": "#/components/responses/VersionsResponse"
          }
        }
      }
    },
    "/v2/accounts/{address}": {
      "get": {
        "summary": "Get account information.",
        "description": "Given a specific account public key, this call returns the accounts status, balance and spendable amounts",
        "operationId": "AccountInformation",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "An account public key",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]{58}",
              "type": "string"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "When set to `all` will exclude asset holdings, application local state, created asset parameters, any created application parameters. Defaults to `none`.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "none"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountResponse"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "address",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "format",
          "in": "query",
          "schema": {
            "type": "string",
            "enum": [
              "json",
              "msgpack"
            ]
          }
        }
      ]
    },
    "/v2/accounts/{address}/assets/{asset-id}": {
      "get": {
        "summary": "Get account information about a given asset.",
        "description": "Given a specific account public key and asset ID, this call returns the account's asset holding and asset parameters (if either exist). Asset parameters will only be returned if the provided address is the asset's creator.",
        "operationId": "AccountAssetInformation",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "An account public key",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]{58}",
              "type": "string"
            }
          },
          {
            "name": "asset-id",
            "in": "path",
            "description": "An asset identifier",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountAssetResponse"
          },
          "400": {
            "description": "Malformed address or asset ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "address",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "format",
          "in": "query",
          "schema": {
            "type": "string",
            "enum": [
              "json",
              "msgpack"
            ]
          }
        }
      ]
    },
    "/v2/accounts/{address}/applications/{application-id}": {
      "get": {
        "summary": "Get account information about a given app.",
        "description": "Given a specific account public key and application ID, this call returns the account's application local state and global state (AppLocalState and AppParams, if either exists). Global state will only be returned if the provided address is the application's creator.",
        "operationId": "AccountApplicationInformation",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "An account public key",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]{58}",
              "type": "string"
            }
          },
          {
            "name": "application-id",
            "in": "path",
            "description": "An application identifier",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountApplicationResponse"
          },
          "400": {
            "description": "Malformed address or application ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "address",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "format",
          "in": "query",
          "schema": {
            "type": "string",
            "enum": [
              "json",
              "msgpack"
            ]
          }
        }
      ]
    },
    "/v2/accounts/{address}/transactions/pending": {
      "get": {
        "summary": "Get a list of unconfirmed transactions currently in the transaction pool by address.",
        "description": "Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
        "operationId": "GetPendingTransactionsByAddress",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "An account public key",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]{58}",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/max"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PendingTransactionsResponse"
          },
          "400": {
            "description": "Max must be a non-negative integer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "address",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v2/blocks/{round}": {
      "get": {
        "summary": "Get the block for the given round.",
        "operationId": "GetBlock",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "The round from which to fetch block information.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BlockResponse"
          },
          "400": {
            "description": "Bad Request - Non integer number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "None existing block ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "round",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "format",
          "in": "query",
          "schema": {
            "type": "string",
            "enum": [
              "json",
              "msgpack"
            ]
          }
        }
      ]
    },
    "/v2/blocks/{round}/transactions/{txid}/proof": {
      "get": {
        "summary": "Get a Merkle proof for a transaction in a block.",
        "operationId": "GetProof",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "The round in which the transaction appears.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "txid",
            "in": "path",
            "description": "The transaction ID for which to generate a proof.",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]+",
              "type": "string"
            }
          },
          {
            "name": "hashtype",
            "in": "query",
            "description": "The type of hash function used to create the proof, must be one of: \n* sha512_256 \n* sha256",
            "schema": {
              "type": "string",
              "enum": [
                "sha512_256",
                "sha256"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProofResponse"
          },
          "400": {
            "description": "Malformed round number or transaction ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Non-existent block or transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error, including protocol not supporting Merkle proofs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown error",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "round",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        },
        {
          "name": "txid",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v2/ledger/supply": {
      "get": {
        "summary": "Get the current supply reported by the ledger.",
        "operationId": "GetSupply",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SupplyResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/participation": {
      "get": {
        "tags": [
          "private"
        ],
        "summary": "Return a list of participation keys",
        "description": "Return a list of participation keys",
        "operationId": "GetParticipationKeys",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ParticipationKeysResponse"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "private"
        ],
        "summary": "Add a participation key to the node",
        "operationId": "AddParticipationKey",
        "requestBody": {
          "description": "The participation key to add to the node",
          "content": {
            "application/msgpack": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PostParticipationResponse"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "participationkey"
      }
    },
    "/v2/participation/{participation-id}": {
      "get": {
        "tags": [
          "private"
        ],
        "summary": "Get participation key info given a participation ID",
        "description": "Given a participation ID, return information about that participation key",
        "operationId": "GetParticipationKeyByID",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ParticipationKeyResponse"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "private"
        ],
        "summary": "Append state proof keys to a participation key",
        "description": "Given a participation ID, append state proof keys to a particular set of participation keys",
        "operationId": "AppendKeys",
        "requestBody": {
          "description": "The state proof keys to add to an existing participation ID",
          "content": {
            "application/msgpack": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ParticipationKeyResponse"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "keymap"
      },
      "delete": {
        "tags": [
          "private"
        ],
        "summary": "Delete a given participation key by ID",
        "description": "Delete a given participation key by ID",
        "operationId": "DeleteParticipationKeyByID",
        "responses": {
          "200": {
            "description": "Participation key got deleted by ID",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "participation-id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v2/shutdown": {
      "post": {
        "tags": [
          "private"
        ],
        "description": "Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.",
        "operationId": "ShutdownNode",
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/status": {
      "get": {
        "summary": "Gets the current node status.",
        "operationId": "GetStatus",
        "responses": {
          "200": {
            "$ref": "#/components/responses/NodeStatusResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/status/wait-for-block-after/{round}": {
      "get": {
        "summary": "Gets the node status after waiting for the given round.",
        "description": "Waits for a block to appear after round {round} and returns the node's status at the time.",
        "operationId": "WaitForBlock",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "The round to wait until returning status",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NodeStatusResponse"
          },
          "400": {
            "description": "Bad Request -- number must be non-negative integer ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "round",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v2/transactions": {
      "post": {
        "summary": "Broadcasts a raw transaction to the network.",
        "operationId": "RawTransaction",
        "requestBody": {
          "description": "The byte encoded signed transaction to broadcast to network",
          "content": {
            "application/x-binary": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PostTransactionsResponse"
          },
          "400": {
            "description": "Bad Request - Malformed Algorand transaction ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "rawtxn"
      }
    },
    "/v2/transactions/params": {
      "get": {
        "summary": "Get parameters for constructing a new transaction",
        "operationId": "TransactionParams",
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionParametersResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/transactions/pending": {
      "get": {
        "summary": "Get a list of unconfirmed transactions currently in the transaction pool.",
        "description": "Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
        "operationId": "GetPendingTransactions",
        "parameters": [
          {
            "$ref": "#/components/parameters/max"
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PendingTransactionsResponse"
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/transactions/pending/{txid}": {
      "get": {
        "summary": "Get a specific pending transaction.",
        "description": "Given a transaction ID of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.\n",
        "operationId": "PendingTransactionInformation",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "A transaction ID",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]+",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/format"
          }
        ],
        "responses": {
          "200": {
            "description": "Given a transaction ID of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\n\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PendingTransactionResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/PendingTransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "txid",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v2/applications/{application-id}": {
      "get": {
        "summary": "Get application information.",
        "description": "Given a application ID, it returns application information including creator, approval and clear programs, global and local schemas, and global state.",
        "operationId": "GetApplicationByID",
        "parameters": [
          {
            "name": "application-id",
            "in": "path",
            "description": "An application identifier",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ApplicationResponse"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Application Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "application-id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/v2/assets/{asset-id}": {
      "get": {
        "summary": "Get asset information.",
        "description": "Given a asset ID, it returns asset information including creator, name, total supply and special addresses.",
        "operationId": "GetAssetByID",
        "parameters": [
          {
            "name": "asset-id",
            "in": "path",
            "description": "An asset identifier",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AssetResponse"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Application Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "asset-id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/v2/teal/compile": {
      "post": {
        "summary": "Compile TEAL source code to binary, produce its hash",
        "description": "Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style). This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.",
        "operationId": "TealCompile",
        "parameters": [
          {
            "name": "sourcemap",
            "in": "query",
            "description": "When set to `true`, returns the source map of the program as a JSON. Defaults to `false`.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "TEAL source code to be compiled",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CompileResponse"
          },
          "400": {
            "description": "Bad Request - Teal Compile Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Developer API not enabled",
            "content": {}
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "source"
      }
    },
    "/v2/teal/disassemble": {
      "post": {
        "summary": "Disassemble program bytes into the TEAL source code.",
        "description": "Given the program bytes, return the TEAL source code in plain text. This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.",
        "operationId": "TealDisassemble",
        "requestBody": {
          "description": "TEAL program binary to be disassembled",
          "content": {
            "application/x-binary": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DisassembleResponse"
          },
          "400": {
            "description": "Bad Request - Teal Compile Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Developer API not enabled",
            "content": {}
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "source"
      }
    },
    "/v2/catchup/{catchpoint}": {
      "post": {
        "tags": [
          "private"
        ],
        "summary": "Starts a catchpoint catchup.",
        "description": "Given a catchpoint, it starts catching up to this catchpoint",
        "operationId": "StartCatchup",
        "parameters": [
          {
            "$ref": "#/components/parameters/catchpoint"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CatchpointStartResponse"
          },
          "201": {
            "$ref": "#/components/responses/CatchpointStartResponse"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "private"
        ],
        "summary": "Aborts a catchpoint catchup.",
        "description": "Given a catchpoint, it aborts catching up to this catchpoint",
        "operationId": "AbortCatchup",
        "parameters": [
          {
            "$ref": "#/components/parameters/catchpoint"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CatchpointAbortResponse"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "catchpoint",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v2/teal/dryrun": {
      "post": {
        "summary": "Provide debugging information for a transaction (or group).",
        "description": "Executes TEAL program(s) in context and returns debugging information about the execution. This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.",
        "operationId": "TealDryrun",
        "requestBody": {
          "description": "Transaction (or group) and any accompanying state-simulation data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DryrunRequest"
              }
            },
            "application/msgpack": {
              "schema": {
                "$ref": "#/components/schemas/DryrunRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DryrunResponse"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Developer API not enabled",
            "content": {}
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request"
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "required": [
          "address",
          "amount",
          "amount-without-pending-rewards",
          "min-balance",
          "pending-rewards",
          "rewards",
          "round",
          "status",
          "total-apps-opted-in",
          "total-assets-opted-in",
          "total-created-apps",
          "total-created-assets"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "the account public key"
          },
          "amount": {
            "type": "integer",
            "description": "\\[algo\\] total number of MicroAlgos in the account"
          },
          "min-balance": {
            "type": "integer",
            "description": "MicroAlgo balance required by the account.\n\nThe requirement grows based on asset and application usage."
          },
          "amount-without-pending-rewards": {
            "type": "integer",
            "description": "specifies the amount of MicroAlgos in the account, without the pending rewards."
          },
          "apps-local-state": {
            "type": "array",
            "description": "\\[appl\\] applications local data stored in this account.\n\nNote the raw object uses `map[int] -> AppLocalState` for this type.",
            "items": {
              "$ref": "#/components/schemas/ApplicationLocalState"
            }
          },
          "total-apps-opted-in": {
            "type": "integer",
            "description": "The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account."
          },
          "apps-total-schema": {
            "$ref": "#/components/schemas/ApplicationStateSchema"
          },
          "apps-total-extra-pages": {
            "type": "integer",
            "description": "\\[teap\\] the sum of all extra application program pages for this account."
          },
          "assets": {
            "type": "array",
            "description": "\\[asset\\] assets held by this account.\n\nNote the raw object uses `map[int] -> AssetHolding` for this type.",
            "items": {
              "$ref": "#/components/schemas/AssetHolding"
            }
          },
          "total-assets-opted-in": {
            "type": "integer",
            "description": "The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account."
          },
          "created-apps": {
            "type": "array",
            "description": "\\[appp\\] parameters of applications created by this account including app global data.\n\nNote: the raw account uses `map[int] -> AppParams` for this type.",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          },
          "total-created-apps": {
            "type": "integer",
            "description": "The count of all apps (AppParams objects) created by this account."
          },
          "created-assets": {
            "type": "array",
            "description": "\\[apar\\] parameters of assets created by this account.\n\nNote: the raw account uses `map[int] -> Asset` for this type.",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "total-created-assets": {
            "type": "integer",
            "description": "The count of all assets (AssetParams objects) created by this account."
          },
          "participation": {
            "$ref": "#/components/schemas/AccountParticipation"
          },
          "pending-rewards": {
            "type": "integer",
            "description": "amount of MicroAlgos of pending rewards in this account."
          },
          "reward-base": {
            "type": "integer",
            "description": "\\[ebase\\] used as part of the rewards computation. Only applicable to accounts which are participating."
          },
          "rewards": {
            "type": "integer",
            "description": "\\[ern\\] total rewards of MicroAlgos the account has received, including pending rewards."
          },
          "round": {
            "type": "integer",
            "description": "The round for which this information is relevant."
          },
          "status": {
            "type": "string",
            "description": "\\[onl\\] delegation status of the account's MicroAlgos\n* Offline - indicates that the associated account is delegated.\n*  Online  - indicates that the associated account used as part of the delegation pool.\n*   NotParticipating - indicates that the associated account is neither a delegator nor a delegate."
          },
          "sig-type": {
            "type": "string",
            "description": "Indicates what type of signature is used by this account, must be one of:\n* sig\n* msig\n* lsig",
            "enum": [
              "sig",
              "msig",
              "lsig"
            ]
          },
          "auth-addr": {
            "type": "string",
            "description": "\\[spend\\] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.",
            "x-algorand-format": "Address"
          }
        },
        "description": "Account information at a given round.\n\nDefinition:\ndata/basics/userBalance.go : AccountData\n"
      },
      "AccountParticipation": {
        "required": [
          "selection-participation-key",
          "vote-first-valid",
          "vote-key-dilution",
          "vote-last-valid",
          "vote-participation-key"
        ],
        "type": "object",
        "properties": {
          "selection-participation-key": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "\\[sel\\] Selection public key (if any) currently registered for this round.",
            "format": "byte"
          },
          "vote-first-valid": {
            "type": "integer",
            "description": "\\[voteFst\\] First round for which this participation is valid."
          },
          "vote-key-dilution": {
            "type": "integer",
            "description": "\\[voteKD\\] Number of subkeys in each batch of participation keys."
          },
          "vote-last-valid": {
            "type": "integer",
            "description": "\\[voteLst\\] Last round for which this participation is valid."
          },
          "vote-participation-key": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "\\[vote\\] root participation public key (if any) currently registered for this round.",
            "format": "byte"
          },
          "state-proof-key": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "\\[stprf\\] Root of the state proof key (if any)",
            "format": "byte"
          }
        },
        "description": "AccountParticipation describes the parameters used by this account in consensus protocol."
      },
      "Asset": {
        "required": [
          "index",
          "params"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "unique asset identifier"
          },
          "params": {
            "$ref": "#/components/schemas/AssetParams"
          }
        },
        "description": "Specifies both the unique identifier and the parameters for an asset"
      },
      "AssetHolding": {
        "required": [
          "amount",
          "asset-id",
          "is-frozen"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "\\[a\\] number of units held.",
            "x-algorand-format": "uint64"
          },
          "asset-id": {
            "type": "integer",
            "description": "Asset ID of the holding.",
            "x-go-name": "AssetID"
          },
          "is-frozen": {
            "type": "boolean",
            "description": "\\[f\\] whether or not the holding is frozen."
          }
        },
        "description": "Describes an asset held by an account.\n\nDefinition:\ndata/basics/userBalance.go : AssetHolding"
      },
      "AssetParams": {
        "required": [
          "creator",
          "decimals",
          "total"
        ],
        "type": "object",
        "properties": {
          "clawback": {
            "type": "string",
            "description": "\\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted."
          },
          "creator": {
            "type": "string",
            "description": "The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case."
          },
          "decimals": {
            "maximum": 19,
            "minimum": 0,
            "type": "integer",
            "description": "\\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive)."
          },
          "default-frozen": {
            "type": "boolean",
            "description": "\\[df\\] Whether holdings of this asset are frozen by default."
          },
          "freeze": {
            "type": "string",
            "description": "\\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted."
          },
          "manager": {
            "type": "string",
            "description": "\\[m\\] Address of account used to manage the keys of this asset and to destroy it."
          },
          "metadata-hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "\\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.",
            "format": "byte"
          },
          "name": {
            "type": "string",
            "description": "\\[an\\] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters."
          },
          "name-b64": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Base64 encoded name of this asset, as supplied by the creator.",
            "format": "byte"
          },
          "reserve": {
            "type": "string",
            "description": "\\[r\\] Address of account holding reserve (non-minted) units of this asset."
          },
          "total": {
            "type": "integer",
            "description": "\\[t\\] The total number of units of this asset.",
            "x-algorand-format": "uint64"
          },
          "unit-name": {
            "type": "string",
            "description": "\\[un\\] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters."
          },
          "unit-name-b64": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Base64 encoded name of a unit of this asset, as supplied by the creator.",
            "format": "byte"
          },
          "url": {
            "type": "string",
            "description": "\\[au\\] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters."
          },
          "url-b64": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Base64 encoded URL where more information about the asset can be retrieved.",
            "format": "byte"
          }
        },
        "description": "AssetParams specifies the parameters for an asset.\n\n\\[apar\\] when part of an AssetConfig transaction.\n\nDefinition:\ndata/transactions/asset.go : AssetParams"
      },
      "ApplicationStateSchema": {
        "required": [
          "num-byte-slice",
          "num-uint"
        ],
        "type": "object",
        "properties": {
          "num-uint": {
            "type": "integer",
            "description": "\\[nui\\] num of uints."
          },
          "num-byte-slice": {
            "type": "integer",
            "description": "\\[nbs\\] num of byte slices."
          }
        },
        "description": "Specifies maximums on the number of each type that may be stored."
      },
      "ApplicationLocalState": {
        "required": [
          "id",
          "schema"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The application which this local state is for."
          },
          "schema": {
            "$ref": "#/components/schemas/ApplicationStateSchema"
          },
          "key-value": {
            "$ref": "#/components/schemas/TealKeyValueStore"
          }
        },
        "description": "Stores local state associated with an application."
      },
      "ParticipationKey": {
        "required": [
          "address",
          "id",
          "key"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The key's ParticipationID."
          },
          "address": {
            "type": "string",
            "description": "Address the key was generated for.",
            "x-algorand-format": "Address"
          },
          "effective-first-valid": {
            "type": "integer",
            "description": "When registered, this is the first round it may be used.",
            "x-algorand-format": "uint64"
          },
          "effective-last-valid": {
            "type": "integer",
            "description": "When registered, this is the last round it may be used.",
            "x-algorand-format": "uint64"
          },
          "last-vote": {
            "type": "integer",
            "description": "Round when this key was last used to vote."
          },
          "last-block-proposal": {
            "type": "integer",
            "description": "Round when this key was last used to propose a block."
          },
          "last-state-proof": {
            "type": "integer",
            "description": "Round when this key was last used to generate a state proof."
          },
          "key": {
            "$ref": "#/components/schemas/AccountParticipation"
          }
        },
        "description": "Represents a participation key used by the node."
      },
      "TealKeyValueStore": {
        "type": "array",
        "description": "Represents a key-value store for use in an application.",
        "items": {
          "$ref": "#/components/schemas/TealKeyValue"
        }
      },
      "TealKeyValue": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/TealValue"
          }
        },
        "description": "Represents a key-value pair in an application store."
      },
      "TealValue": {
        "required": [
          "bytes",
          "type",
          "uint"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "description": "\\[tt\\] value type. Value `1` refers to **bytes**, value `2` refers to **uint**"
          },
          "bytes": {
            "type": "string",
            "description": "\\[tb\\] bytes value."
          },
          "uint": {
            "type": "integer",
            "description": "\\[ui\\] uint value.",
            "x-algorand-format": "uint64"
          }
        },
        "description": "Represents a TEAL value."
      },
      "StateDelta": {
        "type": "array",
        "description": "Application state delta.",
        "items": {
          "$ref": "#/components/schemas/EvalDeltaKeyValue"
        }
      },
      "AccountStateDelta": {
        "required": [
          "address",
          "delta"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "delta": {
            "$ref": "#/components/schemas/StateDelta"
          }
        },
        "description": "Application state delta."
      },
      "EvalDeltaKeyValue": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/EvalDelta"
          }
        },
        "description": "Key-value pairs for StateDelta."
      },
      "EvalDelta": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "integer",
            "description": "\\[at\\] delta action."
          },
          "bytes": {
            "type": "string",
            "description": "\\[bs\\] bytes value."
          },
          "uint": {
            "type": "integer",
            "description": "\\[ui\\] uint value.",
            "x-algorand-format": "uint64"
          }
        },
        "description": "Represents a TEAL value delta."
      },
      "Application": {
        "required": [
          "id",
          "params"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "\\[appidx\\] application index."
          },
          "params": {
            "$ref": "#/components/schemas/ApplicationParams"
          }
        },
        "description": "Application index and its parameters"
      },
      "ApplicationParams": {
        "required": [
          "approval-program",
          "clear-state-program",
          "creator"
        ],
        "type": "object",
        "properties": {
          "creator": {
            "type": "string",
            "description": "The address that created this application. This is the address where the parameters and global state for this application can be found.",
            "x-algorand-format": "Address"
          },
          "approval-program": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "\\[approv\\] approval program.",
            "format": "byte",
            "x-algorand-format": "TEALProgram"
          },
          "clear-state-program": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "\\[clearp\\] approval program.",
            "format": "byte",
            "x-algorand-format": "TEALProgram"
          },
          "extra-program-pages": {
            "type": "integer",
            "description": "\\[epp\\] the amount of extra program pages available to this app."
          },
          "local-state-schema": {
            "$ref": "#/components/schemas/ApplicationStateSchema"
          },
          "global-state-schema": {
            "$ref": "#/components/schemas/ApplicationStateSchema"
          },
          "global-state": {
            "$ref": "#/components/schemas/TealKeyValueStore"
          }
        },
        "description": "Stores the global information associated with an application."
      },
      "DryrunState": {
        "required": [
          "line",
          "pc",
          "stack"
        ],
        "type": "object",
        "properties": {
          "line": {
            "type": "integer",
            "description": "Line number"
          },
          "pc": {
            "type": "integer",
            "description": "Program counter"
          },
          "stack": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TealValue"
            }
          },
          "scratch": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TealValue"
            }
          },
          "error": {
            "type": "string",
            "description": "Evaluation error if any"
          }
        },
        "description": "Stores the TEAL eval step data"
      },
      "DryrunTxnResult": {
        "required": [
          "disassembly"
        ],
        "type": "object",
        "properties": {
          "disassembly": {
            "type": "array",
            "description": "Disassembled program line by line.",
            "items": {
              "type": "string"
            }
          },
          "logic-sig-disassembly": {
            "type": "array",
            "description": "Disassembled lsig program line by line.",
            "items": {
              "type": "string"
            }
          },
          "logic-sig-trace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DryrunState"
            }
          },
          "logic-sig-messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "app-call-trace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DryrunState"
            }
          },
          "app-call-messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "global-delta": {
            "$ref": "#/components/schemas/StateDelta"
          },
          "local-deltas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountStateDelta"
            }
          },
          "logs": {
            "type": "array",
            "items": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "format": "byte"
            }
          },
          "budget-added": {
            "type": "integer",
            "description": "Budget added during execution of app call transaction."
          },
          "budget-consumed": {
            "type": "integer",
            "description": "Budget consumed during execution of app call transaction."
          },
          "cost": {
            "type": "integer",
            "description": "Net cost of app execution. Field is DEPRECATED and is subject for removal. Instead, use `budget-added` and `budget-consumed."
          }
        },
        "description": "DryrunTxnResult contains any LogicSig or ApplicationCall program debug information and state updates from a dryrun."
      },
      "ErrorResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {}
          },
          "message": {
            "type": "string"
          }
        },
        "description": "An error response with optional data field."
      },
      "DryrunRequest": {
        "required": [
          "accounts",
          "apps",
          "latest-timestamp",
          "protocol-version",
          "round",
          "sources",
          "txns"
        ],
        "type": "object",
        "properties": {
          "txns": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "SignedTxn object. Must be canonically encoded.",
              "format": "json",
              "x-algorand-format": "SignedTransaction"
            }
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "apps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          },
          "protocol-version": {
            "type": "string",
            "description": "ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in."
          },
          "round": {
            "type": "integer",
            "description": "Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.",
            "x-algorand-format": "uint64"
          },
          "latest-timestamp": {
            "type": "integer",
            "description": "LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.",
            "format": "int64"
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DryrunSource"
            }
          }
        },
        "description": "Request data type for dryrun endpoint. Given the Transactions and simulated ledger state upload, run TEAL scripts and return debugging information."
      },
      "DryrunSource": {
        "required": [
          "app-index",
          "field-name",
          "source",
          "txn-index"
        ],
        "type": "object",
        "properties": {
          "field-name": {
            "type": "string",
            "description": "FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex]."
          },
          "source": {
            "type": "string"
          },
          "txn-index": {
            "type": "integer"
          },
          "app-index": {
            "type": "integer",
            "x-algorand-format": "uint64"
          }
        },
        "description": "DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into transactions or application state."
      },
      "Version": {
        "title": "Version contains the current algod version.",
        "required": [
          "build",
          "genesis_hash_b64",
          "genesis_id",
          "versions"
        ],
        "type": "object",
        "properties": {
          "build": {
            "$ref": "#/components/schemas/BuildVersion"
          },
          "genesis_hash_b64": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "genesis_id": {
            "type": "string"
          },
          "versions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "algod version information."
      },
      "BuildVersion": {
        "title": "BuildVersion contains the current algod build version information.",
        "required": [
          "branch",
          "build_number",
          "channel",
          "commit_hash",
          "major",
          "minor"
        ],
        "type": "object",
        "properties": {
          "branch": {
            "type": "string"
          },
          "build_number": {
            "type": "integer",
            "format": "int64"
          },
          "channel": {
            "type": "string"
          },
          "commit_hash": {
            "type": "string"
          },
          "major": {
            "type": "integer",
            "format": "int64"
          },
          "minor": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PendingTransactionResponse": {
        "required": [
          "pool-error",
          "txn"
        ],
        "type": "object",
        "properties": {
          "asset-index": {
            "type": "integer",
            "description": "The asset index if the transaction was found and it created an asset."
          },
          "application-index": {
            "type": "integer",
            "description": "The application index if the transaction was found and it created an application."
          },
          "close-rewards": {
            "type": "integer",
            "description": "Rewards in microalgos applied to the close remainder to account."
          },
          "closing-amount": {
            "type": "integer",
            "description": "Closing amount for the transaction."
          },
          "asset-closing-amount": {
            "type": "integer",
            "description": "The number of the asset's unit that were transferred to the close-to address."
          },
          "confirmed-round": {
            "type": "integer",
            "description": "The round where this transaction was confirmed, if present."
          },
          "pool-error": {
            "type": "string",
            "description": "Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.\n"
          },
          "receiver-rewards": {
            "type": "integer",
            "description": "Rewards in microalgos applied to the receiver account."
          },
          "sender-rewards": {
            "type": "integer",
            "description": "Rewards in microalgos applied to the sender account."
          },
          "local-state-delta": {
            "type": "array",
            "description": "\\[ld\\] Local state key/value changes for the application being executed by this transaction.",
            "items": {
              "$ref": "#/components/schemas/AccountStateDelta"
            }
          },
          "global-state-delta": {
            "$ref": "#/components/schemas/StateDelta"
          },
          "logs": {
            "type": "array",
            "description": "\\[lg\\] Logs for the application being executed by this transaction.",
            "items": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "format": "byte"
            }
          },
          "inner-txns": {
            "type": "array",
            "description": "Inner transactions produced by application execution.",
            "items": {
              "$ref": "#/components/schemas/PendingTransactionResponse"
            }
          },
          "txn": {
            "type": "object",
            "properties": {},
            "description": "The raw signed transaction.",
            "x-algorand-format": "SignedTransaction"
          }
        },
        "description": "Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details."
      }
    },
    "responses": {
      "AccountApplicationResponse": {
        "description": "AccountApplicationResponse describes the account's application local state and global state (AppLocalState and AppParams, if either exists) for a specific application ID. Global state will only be returned if the provided address is the application's creator.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "round"
              ],
              "type": "object",
              "properties": {
                "round": {
                  "type": "integer",
                  "description": "The round for which this information is relevant."
                },
                "app-local-state": {
                  "$ref": "#/components/schemas/ApplicationLocalState"
                },
                "created-app": {
                  "$ref": "#/components/schemas/ApplicationParams"
                }
              }
            }
          }
        }
      },
      "AccountAssetResponse": {
        "description": "AccountAssetResponse describes the account's asset holding and asset parameters (if either exist) for a specific asset ID. Asset parameters will only be returned if the provided address is the asset's creator.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "round"
              ],
              "type": "object",
              "properties": {
                "round": {
                  "type": "integer",
                  "description": "The round for which this information is relevant."
                },
                "asset-holding": {
                  "$ref": "#/components/schemas/AssetHolding"
                },
                "created-asset": {
                  "$ref": "#/components/schemas/AssetParams"
                }
              }
            }
          }
        }
      },
      "AccountResponse": {
        "description": "AccountResponse wraps the Account type in a response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
      },
      "ApplicationResponse": {
        "description": "Application information",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Application"
            }
          }
        }
      },
      "AssetResponse": {
        "description": "Asset information",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          }
        }
      },
      "BlockResponse": {
        "description": "Encoded block object.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "block"
              ],
              "type": "object",
              "properties": {
                "block": {
                  "type": "object",
                  "properties": {},
                  "description": "Block header data.",
                  "x-algorand-format": "BlockHeader"
                },
                "cert": {
                  "type": "object",
                  "properties": {},
                  "description": "Optional certificate object. This is only included when the format is set to message pack.",
                  "x-algorand-format": "BlockCertificate"
                }
              }
            }
          }
        }
      },
      "CatchpointAbortResponse": {
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "catchup-message"
              ],
              "type": "object",
              "properties": {
                "catchup-message": {
                  "type": "string",
                  "description": "Catchup abort response string"
                }
              },
              "description": "An catchpoint abort response."
            }
          }
        }
      },
      "CatchpointStartResponse": {
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "catchup-message"
              ],
              "type": "object",
              "properties": {
                "catchup-message": {
                  "type": "string",
                  "description": "Catchup start response string"
                }
              },
              "description": "An catchpoint start response."
            }
          }
        }
      },
      "CompileResponse": {
        "description": "Teal compile Result",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "hash",
                "result"
              ],
              "type": "object",
              "properties": {
                "hash": {
                  "type": "string",
                  "description": "base32 SHA512_256 of program bytes (Address style)"
                },
                "result": {
                  "type": "string",
                  "description": "base64 encoded program bytes"
                },
                "sourcemap": {
                  "type": "object",
                  "properties": {},
                  "description": "JSON of the source map"
                }
              }
            }
          }
        }
      },
      "DisassembleResponse": {
        "description": "Teal disassembly Result",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "result"
              ],
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "description": "disassembled Teal code"
                }
              }
            }
          }
        }
      },
      "DryrunResponse": {
        "description": "DryrunResponse contains per-txn debug information from a dryrun.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "error",
                "protocol-version",
                "txns"
              ],
              "type": "object",
              "properties": {
                "txns": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DryrunTxnResult"
                  }
                },
                "error": {
                  "type": "string"
                },
                "protocol-version": {
                  "type": "string",
                  "description": "Protocol version is the protocol version Dryrun was operated under."
                }
              }
            }
          }
        }
      },
      "NodeStatusResponse": {
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "catchup-time",
                "last-round",
                "last-version",
                "next-version",
                "next-version-round",
                "next-version-supported",
                "stopped-at-unsupported-round",
                "time-since-last-round"
              ],
              "type": "object",
              "properties": {
                "catchup-time": {
                  "type": "integer",
                  "description": "CatchupTime in nanoseconds"
                },
                "last-round": {
                  "type": "integer",
                  "description": "LastRound indicates the last round seen"
                },
                "last-version": {
                  "type": "string",
                  "description": "LastVersion indicates the last consensus version supported"
                },
                "next-version": {
                  "type": "string",
                  "description": "NextVersion of consensus protocol to use"
                },
                "next-version-round": {
                  "type": "integer",
                  "description": "NextVersionRound is the round at which the next consensus version will apply"
                },
                "next-version-supported": {
                  "type": "boolean",
                  "description": "NextVersionSupported indicates whether the next consensus version is supported by this node"
                },
                "stopped-at-unsupported-round": {
                  "type": "boolean",
                  "description": "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress"
                },
                "time-since-last-round": {
                  "type": "integer",
                  "description": "TimeSinceLastRound in nanoseconds"
                },
                "last-catchpoint": {
                  "type": "string",
                  "description": "The last catchpoint seen by the node"
                },
                "catchpoint": {
                  "type": "string",
                  "description": "The current catchpoint that is being caught up to"
                },
                "catchpoint-total-accounts": {
                  "type": "integer",
                  "description": "The total number of accounts included in the current catchpoint"
                },
                "catchpoint-processed-accounts": {
                  "type": "integer",
                  "description": "The number of accounts from the current catchpoint that have been processed so far as part of the catchup"
                },
                "catchpoint-verified-accounts": {
                  "type": "integer",
                  "description": "The number of accounts from the current catchpoint that have been verified so far as part of the catchup"
                },
                "catchpoint-total-blocks": {
                  "type": "integer",
                  "description": "The total number of blocks that are required to complete the current catchpoint catchup"
                },
                "catchpoint-acquired-blocks": {
                  "type": "integer",
                  "description": "The number of blocks that have already been obtained by the node as part of the catchup"
                }
              },
              "description": "NodeStatus contains the information about a node status"
            }
          }
        }
      },
      "ParticipationKeyResponse": {
        "description": "A detailed description of a participation ID",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ParticipationKey"
            }
          }
        }
      },
      "ParticipationKeysResponse": {
        "description": "A list of participation keys",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ParticipationKey"
              }
            }
          }
        }
      },
      "PendingTransactionsResponse": {
        "description": "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "top-transactions",
                "total-transactions"
              ],
              "type": "object",
              "properties": {
                "top-transactions": {
                  "type": "array",
                  "description": "An array of signed transaction objects.",
                  "items": {
                    "type": "object",
                    "properties": {},
                    "x-algorand-format": "SignedTransaction"
                  }
                },
                "total-transactions": {
                  "type": "integer",
                  "description": "Total number of transactions in the pool."
                }
              },
              "description": "PendingTransactions is an array of signed transactions exactly as they were submitted."
            }
          }
        }
      },
      "PostParticipationResponse": {
        "description": "Participation ID of the submission",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "partId"
              ],
              "type": "object",
              "properties": {
                "partId": {
                  "type": "string",
                  "description": "encoding of the participation ID."
                }
              }
            }
          }
        }
      },
      "PostTransactionsResponse": {
        "description": "Transaction ID of the submission.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "txId"
              ],
              "type": "object",
              "properties": {
                "txId": {
                  "type": "string",
                  "description": "encoding of the transaction hash."
                }
              }
            }
          }
        }
      },
      "ProofResponse": {
        "description": "Proof of transaction in a block.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "hashtype",
                "idx",
                "proof",
                "stibhash",
                "treedepth"
              ],
              "type": "object",
              "properties": {
                "proof": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "Merkle proof of transaction membership.",
                  "format": "byte"
                },
                "stibhash": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "Hash of SignedTxnInBlock for verifying proof.",
                  "format": "byte"
                },
                "treedepth": {
                  "type": "integer",
                  "description": "Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root."
                },
                "idx": {
                  "type": "integer",
                  "description": "Index of the transaction in the block's payset."
                },
                "hashtype": {
                  "type": "string",
                  "description": "The type of hash function used to create the proof, must be one of: \n* sha512_256 \n* sha256",
                  "enum": [
                    "sha512_256",
                    "sha256"
                  ]
                }
              }
            }
          }
        }
      },
      "SupplyResponse": {
        "description": "Supply represents the current supply of MicroAlgos in the system.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "current_round",
                "online-money",
                "total-money"
              ],
              "type": "object",
              "properties": {
                "current_round": {
                  "type": "integer",
                  "description": "Round"
                },
                "online-money": {
                  "type": "integer",
                  "description": "OnlineMoney"
                },
                "total-money": {
                  "type": "integer",
                  "description": "TotalMoney"
                }
              },
              "description": "Supply represents the current supply of MicroAlgos in the system"
            }
          }
        }
      },
      "TransactionParametersResponse": {
        "description": "TransactionParams contains the parameters that help a client construct a new transaction.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "consensus-version",
                "fee",
                "genesis-hash",
                "genesis-id",
                "last-round",
                "min-fee"
              ],
              "type": "object",
              "properties": {
                "consensus-version": {
                  "type": "string",
                  "description": "ConsensusVersion indicates the consensus protocol version\nas of LastRound."
                },
                "fee": {
                  "type": "integer",
                  "description": "Fee is the suggested transaction fee\nFee is in units of micro-Algos per byte.\nFee may fall to zero but transactions must still have a fee of\nat least MinTxnFee for the current network protocol."
                },
                "genesis-hash": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "GenesisHash is the hash of the genesis block.",
                  "format": "byte"
                },
                "genesis-id": {
                  "type": "string",
                  "description": "GenesisID is an ID listed in the genesis block."
                },
                "last-round": {
                  "type": "integer",
                  "description": "LastRound indicates the last round seen"
                },
                "min-fee": {
                  "type": "integer",
                  "description": "The minimum transaction fee (not per byte) required for the\ntxn to validate for the current network protocol."
                }
              },
              "description": "TransactionParams contains the parameters that help a client construct\na new transaction.",
              "x-go-package": "github.com/algorand/go-algorand/daemon/algod/api/spec/v1"
            }
          }
        }
      },
      "VersionsResponse": {
        "description": "VersionsResponse is the response to 'GET /versions'",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Version"
            }
          }
        }
      }
    },
    "parameters": {
      "account-id": {
        "name": "account-id",
        "in": "path",
        "description": "account string",
        "required": true,
        "schema": {
          "type": "string",
          "x-go-name": "AccountID"
        },
        "x-go-name": "AccountID"
      },
      "address": {
        "name": "address",
        "in": "query",
        "description": "Only include transactions with this address in one of the transaction fields.",
        "schema": {
          "type": "string"
        }
      },
      "address-role": {
        "name": "address-role",
        "in": "query",
        "description": "Combine with the address parameter to define what type of address to search for.",
        "schema": {
          "type": "string",
          "enum": [
            "sender",
            "receiver",
            "freeze-target"
          ]
        }
      },
      "after-time": {
        "name": "after-time",
        "in": "query",
        "description": "Include results after the given time. Must be an RFC 3339 formatted string.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "x-algorand-format": "RFC3339 String"
        },
        "x-algorand-format": "RFC3339 String"
      },
      "asset-id": {
        "name": "asset-id",
        "in": "query",
        "description": "Asset ID",
        "schema": {
          "type": "integer",
          "x-go-name": "AssetID"
        },
        "x-go-name": "AssetID"
      },
      "before-time": {
        "name": "before-time",
        "in": "query",
        "description": "Include results before the given time. Must be an RFC 3339 formatted string.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "x-algorand-format": "RFC3339 String"
        },
        "x-algorand-format": "RFC3339 String"
      },
      "catchpoint": {
        "name": "catchpoint",
        "in": "path",
        "description": "A catch point",
        "required": true,
        "schema": {
          "pattern": "[0-9]{1,10}#[A-Z0-9]{1,53}",
          "type": "string",
          "format": "catchpoint",
          "x-algorand-format": "Catchpoint String"
        },
        "x-algorand-format": "Catchpoint String"
      },
      "currency-greater-than": {
        "name": "currency-greater-than",
        "in": "query",
        "description": "Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
        "schema": {
          "type": "integer"
        }
      },
      "currency-less-than": {
        "name": "currency-less-than",
        "in": "query",
        "description": "Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.",
        "schema": {
          "type": "integer"
        }
      },
      "exclude-close-to": {
        "name": "exclude-close-to",
        "in": "query",
        "description": "Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.",
        "schema": {
          "type": "boolean"
        }
      },
      "format": {
        "name": "format",
        "in": "query",
        "description": "Configures whether the response object is JSON or MessagePack encoded.",
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "msgpack"
          ]
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of results to return.",
        "schema": {
          "type": "integer"
        }
      },
      "max": {
        "name": "max",
        "in": "query",
        "description": "Truncated number of transactions to display. If max=0, returns all pending txns.",
        "schema": {
          "type": "integer"
        }
      },
      "max-round": {
        "name": "max-round",
        "in": "query",
        "description": "Include results at or before the specified max-round.",
        "schema": {
          "type": "integer"
        }
      },
      "min-round": {
        "name": "min-round",
        "in": "query",
        "description": "Include results at or after the specified min-round.",
        "schema": {
          "type": "integer"
        }
      },
      "next": {
        "name": "next",
        "in": "query",
        "description": "The next page of results. Use the next token provided by the previous results.",
        "schema": {
          "type": "string"
        }
      },
      "note-prefix": {
        "name": "note-prefix",
        "in": "query",
        "description": "Specifies a prefix which must be contained in the note field.",
        "schema": {
          "type": "string",
          "x-algorand-format": "base64"
        },
        "x-algorand-format": "base64"
      },
      "round": {
        "name": "round",
        "in": "query",
        "description": "Include results for the specified round.",
        "schema": {
          "type": "integer"
        }
      },
      "round-number": {
        "name": "round-number",
        "in": "path",
        "description": "Round number",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "sig-type": {
        "name": "sig-type",
        "in": "query",
        "description": "SigType filters just results using the specified type of signature:\n* sig - Standard\n* msig - MultiSig\n* lsig - LogicSig",
        "schema": {
          "type": "string",
          "enum": [
            "sig",
            "msig",
            "lsig"
          ]
        }
      },
      "tx-id": {
        "name": "tx-id",
        "in": "query",
        "description": "Lookup the specific transaction by ID.",
        "schema": {
          "type": "string",
          "x-algorand-format": "Address",
          "x-go-name": "TxID"
        },
        "x-algorand-format": "Address",
        "x-go-name": "TxID"
      },
      "tx-type": {
        "name": "tx-type",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "pay",
            "keyreg",
            "acfg",
            "axfer",
            "afrz",
            "appl"
          ]
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "description": "Generated header parameter. This token can be generated using the Goal command line tool. Example value ='b7e384d0317b8050ce45900a94a1931e28540e1f69b2d242b424659c341b4697'",
        "name": "X-Algo-API-Token",
        "in": "header"
      }
    }
  }
}